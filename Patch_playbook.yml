---
- name: Linux Server Patch through Ansible.
  hosts: all
  become: true
  strategy: free
  ignore_errors: true

  tasks:
# purpose of this task to check RHEL OS version and enable correct repo
    - name:  verify RHEL version
      shell: for i in `rpm -q --queryformat '%{VERSION}' redhat-release-server|cut -c 1`; do echo rhel_version_$i; done
      ignore_errors: true
      register: rhel_version

    - name: Setting A Preferred Operating System Release Version
      command: subscription-manager release --set=6.10
      when: rhel_version.stdout == "rhel_version_6"
      command: subscription-manager release --set=7.6
      when:     rhel_version.stdout == "rhel_version_7"

    - name: upgrade all packages, excluding kernel & foo related packages
      yum:
            name: '*'
            state: latest
            enablerepo: rhel-7-server-rpms
            disablerepo: '*'
            #upgrade all packages, excluding kernel & foo related packages
            #exclude: kernel*,foo*
            #Download the package but do not install it.
            #download_only: true
           # when: rhel_version.stdout == "rhel_version_7"
           # ignore_errors: true
#
#        yum:
#            name: '*'
#            state: latest
#            enablerepo: rhel-6-server-rpms
#            disablerepo: '*'
            #upgrade all packages, excluding kernel & foo related packages
            #exclude: kernel*,foo*
            #Download the package but do not install it.
            #download_only: true
#            when: rhel_version.stdout == "rhel_version_6"
#            ignore_errors: true

    # this task is to check if kernel update happend and system needs reboot ot not
    - name: check if reboot required after kernel update.
      shell: KERNEL_NEW=$(rpm -q --last kernel |head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi
      ignore_errors: true
      register: reboot_required



    # this task is to restart the system
    - name: restart system
      command: shutdown -r +1  "Rebooting System After Patching"
      async: 0
      poll: 0
      when: reboot_required.stdout == "reboot_needed"
      register: reboot_started
      ignore_errors: true

    # this task is to wait for 3 minutues for system to come up after the reboot
    - name: pause for 180 secs
      pause:
        minutes: 3

    # this task is to confirm,system is up and responding to ssh
    - name: check if system responding to ssh
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=15
          timeout=300
          state=started
      when: reboot_started|changed
